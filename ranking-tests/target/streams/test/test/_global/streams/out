[debug] Running TaskDef(com.example.ranking.tests.RankerSpec, org.scalatest.tools.Framework$$anon$1@3f9c9339, false, [SuiteSelector])
[debug] Running TaskDef(com.example.ranking.tests.ConfigSchemaSpec, org.scalatest.tools.Framework$$anon$1@3f9c9339, false, [SuiteSelector])
[debug] Running TaskDef(com.example.ranking.tests.ExpressionRankingIntegrationSpec, org.scalatest.tools.Framework$$anon$1@3f9c9339, false, [SuiteSelector])
[debug] Running TaskDef(com.example.ranking.tests.RankingCoreSpec, org.scalatest.tools.Framework$$anon$1@3f9c9339, false, [SuiteSelector])
[debug] Running TaskDef(com.example.ranking.tests.ExpressionEvaluatorSpec, org.scalatest.tools.Framework$$anon$1@3f9c9339, false, [SuiteSelector])
[debug] Running TaskDef(com.example.ranking.tests.IntegrationSpec, org.scalatest.tools.Framework$$anon$1@3f9c9339, false, [SuiteSelector])
[debug] Running TaskDef(com.example.ranking.tests.ConfigSpec, org.scalatest.tools.Framework$$anon$1@3f9c9339, false, [SuiteSelector])
[info] IntegrationSpec:
[info] RankingService
[info] - should handle requests without config
[info] - should handle requests with valid config
[info] - should reject invalid configurations
[info] ConfigSchemaSpec:
[info] RankingConfigSchema
[info] - should parse the sample YAML config
[info] ConfigResolver
[info] - should resolve base config correctly
[info] - should resolve experiment group overrides
[info] ConfigResolver validation
[info] - should reject invalid scoring formulas
[info] - should reject invalid filter conditions
[info] - should reject invalid boost factors
[info] ConfigSpec:
[info] RankingConfig
[info] - should parse valid YAML
[info] ConfigValidator
[info] - should validate supported strategies
[info] - should validate weight ranges
[info] - should require weights for weighted strategy
[info] RankingCoreSpec:
[info] RankingEngine with score-based strategy
[info] - should rank items by score descending
[info] Weighted ranking strategy
[info] - should apply weights correctly
[info] RankerSpec:
[info] Ranker
[info] - should rank offers using expression-based scoring
[info] - should apply filters correctly *** FAILED ***
[info]   Left("Filter evaluation failed: Filter evaluation errors: Parse error: Position 1:9, found ">= 1.5"; Filter evaluation errors: Parse error: Position 1:9, found ">= 1.5"; Filter evaluation errors: Parse error: Position 1:9, found ">= 1.5"; Filter evaluation errors: Parse error: Position 1:9, found ">= 1.5"") was not an instance of scala.util.Right, but an instance of scala.util.Left (RankerSpec.scala:69)
[info] - should apply boost factors
[info] - should limit results correctly
[info] - should handle scoring errors gracefully
[info] - should handle filter errors gracefully
[info] - should provide detailed debug information *** FAILED ***
[info]   Left("Filter evaluation failed: Filter evaluation errors: Parse error: Position 1:9, found "> 1.0"; Filter evaluation errors: Parse error: Position 1:9, found "> 1.0"; Filter evaluation errors: Parse error: Position 1:9, found "> 1.0"; Filter evaluation errors: Parse error: Position 1:9, found "> 1.0"") was not an instance of scala.util.Right, but an instance of scala.util.Left (RankerSpec.scala:169)
[info] Ranker.quickRank
[info] - should provide simple ranking interface
[info] Ranker.validateConfig
[info] - should validate configuration before use
[info] - should validate with sample features
[info] FilterEvaluator
[info] - should handle complex filter conditions *** FAILED ***
[info]   Left("Filter evaluation errors: Parse error: Position 1:9, found ">= 2.0"") was not an instance of scala.util.Right, but an instance of scala.util.Left (RankerSpec.scala:246)
[info] Offer
[info] - should convert from Item correctly
[info] - should provide convenient helper methods
[info] ExpressionEvaluatorSpec:
[info] ExpressionEvaluator
[info] - should evaluate simple arithmetic expressions
[info] - should handle subtraction and division
[info] - should respect operator precedence
[info] - should handle unary operators
[info] - should handle power operations
[info] - should evaluate mathematical functions
[info] - should handle complex nested expressions
[info] - should return error for missing variables
[info] - should return error for division by zero
[info] - should return error for invalid function calls
[info] - should extract variables from expressions
[info] - should validate expression syntax
[info] - should provide detailed evaluation info
[info] - should handle expressions with defaults
[info] - should allow user features to override defaults
[info] String extension methods
[info] - should work correctly
[info] ExpressionRankingIntegrationSpec:
[info] Expression-based ranking
[info] - should work end-to-end with config
[info] - should rank items using expression evaluation
[info] - should handle missing features gracefully
[info] - should apply boost factors correctly
[info] - should validate formulas in config
[info] - should work with experiment group overrides
[info] Real-world example
[info] - should demonstrate complete ranking pipeline
[info] Run completed in 1 second, 77 milliseconds.
[info] Total number of tests run: 51
[info] Suites: completed 7, aborted 0
[info] Tests: succeeded 48, failed 3, canceled 0, ignored 0, pending 0
[info] *** 3 TESTS FAILED ***
[debug] Passed tests:
[debug] 	com.example.ranking.tests.ConfigSchemaSpec
[debug] 	com.example.ranking.tests.ConfigSpec
[debug] 	com.example.ranking.tests.RankingCoreSpec
[debug] 	com.example.ranking.tests.ExpressionRankingIntegrationSpec
[debug] 	com.example.ranking.tests.ExpressionEvaluatorSpec
[debug] 	com.example.ranking.tests.IntegrationSpec
[error] Failed tests:
[error] 	com.example.ranking.tests.RankerSpec
[error] (rankingTests / Test / test) sbt.TestsFailedException: Tests unsuccessful
